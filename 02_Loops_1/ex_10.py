import math
import time

#Euclid proved that every perfect number can be generated by a formula:
#num = 2^(p-1) * (2^p - 1) where p and 2^p - 1 are prime numbers
#algorithm: if p is prime than if 2^p - 1 is prime than if num is perfect, print num
s = time.time()
for p in range(2, 12, 1):
    b = 2
    flag = True
    while b <= math.sqrt(p):
        if p % b == 0:
            flag = False
            break
        else: b += 1
    if p == 2: flag = True
    if flag == False: continue
    pow2P = pow(2, p)
    pow2P -= 1
    b = 2
    flag = True
    while b <= math.sqrt(pow2P):
        if pow2P % b == 0:
            flag = False
            break
        else: b += 1
    if flag == False: continue
    potPerf = pow(2, p-1) * (pow(2, p) - 1)
    if potPerf > 1000000: break
    divSum = 1
    b = 2
    while b < math.sqrt(potPerf):
        if potPerf % b == 0:
            divSum += b + potPerf//b
        b += 1
    if b == math.sqrt(potPerf):
        divSum += b
    if divSum == potPerf:
        print(potPerf)    
e = time.time()
print(e-s)
"""
s = time.time()
for n in range(2, 1000001, 1):
    b = 2
    divSum = 1
    while b < math.sqrt(n):
        if n % b == 0:
            divSum += b + n//b
        b += 1
    if b == math.sqrt(n):
            divSum += b
    if divSum == n:
        print(n)
e = time.time()
print(e-s)
"""